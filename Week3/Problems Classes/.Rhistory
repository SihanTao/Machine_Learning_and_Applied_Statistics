source("~/Github/Machine_Learning_and_Applied_Statistics/Week3/Lectures/DemoCode and Data/sim_pois_proc.R")
source("~/Github/Machine_Learning_and_Applied_Statistics/Week3/Lectures/DemoCode and Data/sim_pois_proc.R")
source("~/Github/Machine_Learning_and_Applied_Statistics/Week3/Lectures/DemoCode and Data/sim_pois_proc.R")
setwd("~/Github/Machine_Learning_and_Applied_Statistics/Week3/Lectures/DemoCode and Data")
# slide 63
lambda = 10
N = rpoispp(lambda,win=c(0,10,0,10))
plot(N,type='p',pch=19,cex=0.3)
source("~/Github/Machine_Learning_and_Applied_Statistics/Week3/Lectures/DemoCode and Data/sim_spat_pois_proc.R")
source("~/Github/Machine_Learning_and_Applied_Statistics/Week3/Lectures/DemoCode and Data/sim_spat_pois_proc.R")
source("~/Github/Machine_Learning_and_Applied_Statistics/Week3/Lectures/DemoCode and Data/sim_spat_pois_proc.R")
source("~/Github/Machine_Learning_and_Applied_Statistics/Week3/Lectures/DemoCode and Data/sim_spat_pois_proc.R")
source("~/Github/Machine_Learning_and_Applied_Statistics/Week3/Lectures/DemoCode and Data/sim_spat_pois_proc.R")
source("~/Github/Machine_Learning_and_Applied_Statistics/Week3/Lectures/DemoCode and Data/sim_spat_pois_proc.R")
source("~/Github/Machine_Learning_and_Applied_Statistics/Week3/Lectures/DemoCode and Data/sim_spat_pois_proc.R")
source("~/Github/Machine_Learning_and_Applied_Statistics/Week3/Lectures/DemoCode and Data/Fest_example.R")
# Slide 139
# load point pattern from csv
N = read.table('test_data_dense.csv',sep=',')
#convert it into the ppp data format for SpatStat
N = as.ppp(N,c(0,1,0,1))
Fenv = envelope(N,Fest)
plot(Fenv)
# CSR
N = rpoispp(100)
Fenv = envelope(N,Fest)
plot(Fenv)
#clustered process
N = rThomas(10,0.02,10)
Fenv = envelope(N,Fest)
plot(Fenv)
# Slide 139
# load point pattern from csv
N = read.table('test_data_dense.csv',sep=',')
#convert it into the ppp data format for SpatStat
N = as.ppp(N,c(0,1,0,1))
as.ppp?
aa
?as.ppp
??as.ppp
packages.install("spatstat")
package.install("spatstat")
install.packages("spatstat")
# load point pattern from csv
N = read.table('test_data_dense.csv',sep=',')
# convert into ppp data format for spat stat
N = as.ppp(N,c(0,1,0,1))
plot(N)
# slide 92
library(spatstat)
# load point pattern from csv
N = read.table('test_data_dense.csv',sep=',')
# convert into ppp data format for spat stat
N = as.ppp(N,c(0,1,0,1))
plot(N)
# estimate K(r) using Ripley’s edge correction
K = Kest(N,correction='Ripley')
# plot K(r) and L(r)-r
plot(K)
plot(K,sqrt(./pi)-r ~ r)
# plot K(r) and L(r)-r
plot(K)
plot(K,sqrt(./pi)-r ~ r)
# slide 92
library(spatstat)
# load point pattern from csv
N = read.table('test_data_dense.csv',sep=',')
# convert into ppp data format for spat stat
N = as.ppp(N,c(0,1,0,1))
plot(N)
# estimate K(r) using Ripley’s edge correction
K = Kest(N,correction='Ripley')
# plot K(r) and L(r)-r
plot(K)
plot(K,sqrt(./pi)-r ~ r)
source("~/Github/Machine_Learning_and_Applied_Statistics/Week3/Lectures/DemoCode and Data/Fest_example.R")
source("~/Github/Machine_Learning_and_Applied_Statistics/Week3/Lectures/DemoCode and Data/Kest_example.R")
source("~/Github/Machine_Learning_and_Applied_Statistics/Week3/Lectures/DemoCode and Data/Kest_example.R")
source("~/Github/Machine_Learning_and_Applied_Statistics/Week3/Lectures/DemoCode and Data/Kest_example.R")
source("~/Github/Machine_Learning_and_Applied_Statistics/Week3/Lectures/DemoCode and Data/Kest_example.R")
setwd("~/Github/Machine_Learning_and_Applied_Statistics/Week3/Problems Classes")
?ppois
lambda = 1523
poisson_dist = ppois(1600, lambda)
lambda = 1523
1 - ppois(1600, lambda)
?rpois
?rpois
?runif
?rpois
homogeneouspp = function(lambda, T) {
poisson_sim = rpois(100, lambda)
E = runif(poisson_sim, min = 0, max = T)
E = sort(E)
return(E)
}
simulate = homogeneouspp(10, 10)
plot(E,rep(0,length(E)),type='p',pch=19,cex=0.3)
E = homogeneouspp(10, 10)
plot(E,rep(0,length(E)),type='p',pch=19,cex=0.3)
# slide 47
lambda = 2
TT = 10
N = rpois(1,lambda*TT)
E = runif(N,min=0,max=TT)
E = sort(E)
plot(E,rep(0,length(E)),type='p',pch=19,cex=0.3)
homogeneouspp = function(lambda, T) {
poisson_sim = rpois(100, lambda)
E = runif(poisson_sim, min = 0, max = T)
E = sort(E)
return(E)
}
homogeneouspp = function(lambda, T) {
poisson_sim = rpois(100, lambda)
E = runif(poisson_sim, min = 0, max = T)
E = sort(E)
return(E)
}
E = homogeneouspp(10, 10)
plot(E,rep(0,length(E)),type='p',pch=19,cex=0.3)
?dpois
E
E[which(E > 3 && E < 5)]
which(E > 3 && E < 5)
which(E > 3)
which(E > 3 & E <= 5)
?length
length(which(E > 3 & E <= 5))
?dpois
dpois(c(3, 5), 10)
start, end = dpois(c(3, 5), 10)
quantiles = dpois(c(3, 5), 10)
quantiles[0]
typeof(quantiles)
quantiles
quantiles = dpois(c(3, 5, 7), 10)
quantiles
quantiles = dpois(c(3, 5), 10)
quantiles
quantiles[1]
100 * (quantiles[2] - quantiles[1])
plot(E,rep(0,length(E)),type='p',pch=19,cex=0.3)
E = homogeneouspp(10, 10)
plot(E,rep(0,length(E)),type='p',pch=19,cex=0.3)
homogeneouspp = function(lambda, T) {
poisson_sim = rpois(100, lambda)
E = runif(poisson_sim, min = 0, max = T)
E = sort(E)
return(E)
}
E = homogeneouspp(10, 10)
plot(E,rep(0,length(E)),type='p',pch=19,cex=0.3)
dpois(c(3, 5), 10)
?runif
# Number of realisations in (3, 5]
length(which(E > 3 & E <= 5))
# Number of realisations in (3, 5]
length(which(E > 3 & E <= 5))
homogeneouspp = function(lambda, T) {
poisson_sim = rpois(100, lambda)
E = runif(poisson_sim, min = 0, max = T)
E = sort(E)
return(E)
}
E = homogeneouspp(10, 10)
plot(E,rep(0,length(E)),type='p',pch=19,cex=0.3)
# Number of realisations in (3, 5]
length(which(E > 3 & E <= 5))
quantiles = dpois(c(3, 5), 10)
100 * (quantiles[2] - quantiles[1])
1000 * (quantiles[2] - quantiles[1])
source("~/Github/Machine_Learning_and_Applied_Statistics/Week3/Lectures/DemoCode and Data/sim_pois_rv.R")
(quantiles[2] - quantiles[1])
?runif
homogeneouspp = function(lambda, T) {
poisson_sim = rpois(1, lambda * T)
E = runif(poisson_sim, min = 0, max = T)
E = sort(E)
return(E)
}
E = homogeneouspp(10, 10)
plot(E,rep(0,length(E)),type='p',pch=19,cex=0.3)
# Number of realisations in (3, 5]
length(which(E > 3 & E <= 5))
quantiles = dpois(c(3, 5), 10)
(quantiles[2] - quantiles[1])
quantiles = dpois(c(3, 5), 100)
(quantiles[2] - quantiles[1]) * 100
dpois(c(3, 5), 20)
# Number of realisations in (3, 5]
E[which(E > 3 & E <= 5)]
# Number of realisations in (3, 5]
mean(E[which(E > 3 & E <= 5)])
# Number of realisations in (3, 5]
length(E[which(E > 3 & E <= 5)])
?dpois
dpois(c(3, 5), 20)
dpois(c(3, 5), 20) * 100
qpois(3, 20) * 100
homogeneouspp = function(lambda, T) {
poisson_sim = rpois(1, lambda * T)
E = runif(poisson_sim, min = 0, max = T)
E = sort(E)
return(E)
}
E = homogeneouspp(10, 10)
plot(E,rep(0,length(E)),type='p',pch=19,cex=0.3)
# Number of realisations in (3, 5]
length(E[which(E > 3 & E <= 5)])
# Number of realisations in (3, 5]
length(E[which(E > 3 & E <= 5)])
homogeneouspp = function(lambda, T) {
poisson_sim = rpois(1, lambda * T)
E = runif(poisson_sim, min = 0, max = T)
E = sort(E)
return(E)
}
E = homogeneouspp(10, 10)
plot(E,rep(0,length(E)),type='p',pch=19,cex=0.3)
# Number of realisations in (3, 5]
length(E[which(E > 3 & E <= 5)])
hist(X,freq=F,breaks = seq(0,20,1))
hist(E,freq=F,breaks = seq(0,20,1))
homogeneouspp = function(lambda, T) {
poisson_sim = rpois(1, lambda * T)
E = runif(poisson_sim, min = 0, max = T)
E = sort(E)
return(E)
}
E = homogeneouspp(10, 10)
plot(E,rep(0,length(E)),type='p',pch=19,cex=0.3)
# Number of realisations in (3, 5]
length(E[which(E > 3 & E <= 5)])
hist(E,freq=F,breaks = seq(0,20,1))
hist(E[which(E > 2 & E <= 8)],freq=F,breaks = seq(0,20,1))
hist(E[which(E > 2 & E <= 8)],freq=F,breaks = seq(2,8,1))
?cor
cor(E[which(E > 2 & E <= 5)], E[which(E > 6 & E <= 8)])
homogeneouspp = function(lambda, T) {
poisson_sim = rpois(1, lambda * T)
E = runif(poisson_sim, min = 0, max = T)
E = sort(E)
return(E)
}
E = homogeneouspp(10, 10)
plot(E,rep(0,length(E)),type='p',pch=19,cex=0.3)
# Number of realisations in (3, 5]
length(E[which(E > 3 & E <= 5)])
# Number of realisations in (3, 5]
length(which(E > 3 & E <= 5))
homogeneouspp = function(lambda, T) {
N = rpois(1, lambda * T)
E = runif(N, min = 0, max = T)
E = sort(E)
return(E)
}
for (i in 1:100) {
print((i))
}
sum/100
sum = 0
for (i in 1:100) {
sim = homogeneouspp(10, 10)
sum += length(which(sim > 3 & sim <= 5))
sum = 0
for (i in 1:100) {
sim = homogeneouspp(10, 10)
sum = sum + length(which(sim > 3 & sim <= 5))
}
sum/100
sum = 0
for (i in 1:100) {
sim = homogeneouspp(10, 10)
sum = sum + length(which(sim > 3 & sim <= 5))
}
sum/100
sum = 0
for (i in 1:100) {
sim = homogeneouspp(10, 10)
sum = sum + length(which(sim > 3 & sim <= 5))
}
sum/100
sum = 0
sim = list()
for (i in 1:100) {
N = homogeneouspp(10, 10)
sum = sum + length(which(N > 3 & N <= 5))
typeof(N)
}
sum/100
N = homogeneouspp(10, 10)
typeof(N)
head(N)
N
N = homogeneouspp(10, 10)
N = c(c(1), N)
N
sum = 0
all_simu = c()
for (i in 1:100) {
N = homogeneouspp(10, 10)
sum = sum + length(which(N > 3 & N <= 5))
all_simu = c(N, all_simu)
}
sum/100
hist(all_simu[which(all_simu > 2 & all_simu <= 8)],freq=F,breaks = seq(2,8,1))
lambda = 1523
1 - ppois(1600, lambda)
homogeneouspp = function(lambda, T) {
N = rpois(1, lambda * T)
E = runif(N, min = 0, max = T)
E = sort(E)
return(E)
}
sum = 0
all_simu = c()
for (i in 1:100) {
N = homogeneouspp(10, 10)
sum = sum + length(which(N > 3 & N <= 5))
all_simu = c(N, all_simu)
}
sum/100
hist(all_simu,freq=F,breaks = seq(0,20,1))
sum = 0
all_simu = c()
for (i in 1:2) {
N = homogeneouspp(10, 10)
sum = sum + length(which(N > 3 & N <= 5))
all_simu = c(N, all_simu)
}
sum/100
hist(all_simu,freq=F,breaks = seq(0,20,1))
for (i in 1:2) {
N = homogeneouspp(10, 10)
sum = sum + length(which(N > 3 & N <= 5))
all_simu = c(N, all_simu)
}
sum/100
all_simu
sum = 0
all_simu = c()
for (i in 1:100) {
N = homogeneouspp(10, 10)
sum = sum + length(which(N > 3 & N <= 5))
all_simu = c(N, all_simu)
}
sum/100
hist(all_simu,freq=F,breaks = seq(0,20,1))
sum = 0
all_simu = c()
for (i in 1:100) {
N = homogeneouspp(10, 10)
len = length(which(N > 3 & N <= 5))
sum = sum + len
all_simu = c(len, all_simu)
}
sum/100
hist(all_simu,freq=F,breaks = seq(0,20,1))
all_simu
N = c()
for (i in 1:100) {
sim = homogeneouspp(10, 10)
len = which(sim > 2 & sim <= 8)
N = c(N, c(len))
}
hist(N)
N = c()
for (i in 1:100) {
sim = homogeneouspp(10, 10)
len = which(sim > 2 & sim <= 8)
N = c(N, c(len))
}
hist(N)
N = c()
for (i in 1:100) {
sim = homogeneouspp(10, 10)
len = which(sim > 2 & sim <= 8)
N = c(len, N)
}
hist(N)
N = c()
for (i in 1:100) {
sim = homogeneouspp(10, 10)
len = which(sim > 2 & sim <= 8)
N = c(len, N)
}
lambda = 1523
1 - ppois(1600, lambda)
homogeneouspp = function(lambda, T) {
N = rpois(1, lambda * T)
E = runif(N, min = 0, max = T)
E = sort(E)
return(E)
}
sum = 0
all_simu = c()
for (i in 1:100) {
N = homogeneouspp(10, 10)
len = length(which(N > 3 & N <= 5))
sum = sum + len
}
sum/100
N = c()
for (i in 1:100) {
sim = homogeneouspp(10, 10)
len = which(sim > 2 & sim <= 8)
N = c(len, N)
}
hist(N)
N = c()
for (i in 1:100) {
sim = homogeneouspp(10, 10)
len = length(which(sim > 2 & sim <= 8))
N = c(len, N)
}
hist(N)
N = c()
for (i in 1:100) {
sim = homogeneouspp(10, 10)
len = length(which(sim > 2 & sim <= 8))
N = c(len, N)
}
hist(N)
N = c()
for (i in 1:100) {
sim = homogeneouspp(10, 10)
len = length(which(sim > 2 & sim <= 8))
N = c(c(len), N)
}
hist(N)
N = c()
for (i in 1:100) {
sim = homogeneouspp(10, 10)
len = length(which(sim > 2 & sim <= 8))
N = c(c(len), N)
}
hist(N)
N = c()
for (i in 1:100) {
sim = homogeneouspp(10, 10)
len = length(which(sim > 2 & sim <= 8))
N = c(c(len), N)
}
hist(N)
N = c()
for (i in 1:100) {
sim = homogeneouspp(10, 10)
len = length(which(sim > 2 & sim <= 8))
N = c(c(len), N)
}
hist(N)
N = c()
for (i in 1:100) {
sim = homogeneouspp(10, 10)
len = length(which(sim > 2 & sim <= 8))
N[i] = len
}
hist(N)
N = c()
for (i in 1:100) {
sim = homogeneouspp(10, 10)
len = length(which(sim > 2 & sim <= 8))
N[i] = len
}
hist(N)
N = c()
for (i in 1:100) {
sim = homogeneouspp(10, 10)
len = length(which(sim > 2 & sim <= 8))
N[i] = len
}
hist(N)
lines(dpois(1:100, 60))
N = c()
for (i in 1:100) {
sim = homogeneouspp(10, 10)
len = length(which(sim > 2 & sim <= 8))
N[i] = len
}
hist(N)
plot(dpois(1:100, 60))
N = c()
for (i in 1:100) {
sim = homogeneouspp(10, 10)
len = length(which(sim > 2 & sim <= 8))
N[i] = len
}
hist(N)
plot(dpois(1:100, 60) * 100)
N = c()
for (i in 1:100) {
sim = homogeneouspp(10, 10)
len = length(which(sim > 2 & sim <= 8))
N[i] = len
}
hist(N)
plot(dpois(1:100, 60))
lambda = 1523
1 - ppois(1600, lambda)
homogeneouspp = function(lambda, T) {
N = rpois(1, lambda * T)
E = runif(N, min = 0, max = T)
E = sort(E)
return(E)
}
homogeneouspp = function(lambda, T) {
N = rpois(1, lambda * T)
E = runif(N, min = 0, max = T)
E = sort(E)
return(E)
}
