X
pca
pca$x
pca$x[,1]
plot(x_pca[,1], x_pca[,2])
x_pca = pca$x
plot(x_pca[,1], x_pca[,2])
x_pca = pca$x
plot(x_pca[,1], x_pca[,2], xlab = "PC1", ylab = "PC2")
x_pca = pca$x
plot(x_pca[,1], x_pca[,2], xlab = "PC1", ylab = "PC2",col = euclidean_tree)
(x_pca[,1], x_pca[,2], xlab = "PC1", ylab = "PC2",col = manhattan_tree)
plot(x_pca[,1], x_pca[,2], xlab = "PC1", ylab = "PC2",col = manhattan_tree)
x_pca = pca$x
plot(x_pca[,1], x_pca[,2], xlab = "PC1", ylab = "PC2",col = euclidean_tree)
manhattan_d = dist(X, method = "manhattan")
manhattan_hdata = hclust(manhattan_d)
plot(manhattan_hdata)
abline(4.75,0,col = "red")
manhattan_d = dist(X, method = "manhattan")
manhattan_hdata = hclust(manhattan_d)
plot(manhattan_hdata)
abline(6,0,col = "red")
euclidean_tree = cutree(euclidean_hdata, h = 3.75)
manhattan_tree = cutree(manhattan_hdata, h = 6)
plot(euclidean_tree)
plot(manhattan_tree)
euclidean_tree = cutree(euclidean_hdata, h = 3.75)
manhattan_tree = cutree(manhattan_hdata, h = 6)
plot(euclidean_tree)
plot(manhattan_tree)
x_pca = pca$x
plot(x_pca[,1], x_pca[,2], xlab = "PC1", ylab = "PC2",col = euclidean_tree)
plot(x_pca[,1], x_pca[,2], xlab = "PC1", ylab = "PC2",col = manhattan_tree)
train_nn_wrapper <- function(hidden_spec) {
nn.train(x_train_, y_train_,
hidden=hidden_spec,
activationfun="tanh",
learningrate=1e-1,
batchsize=BATCH_SIZE,
numepochs=N_EPOCHS,
output="linear",
momentum=0.0)
}
architecture_list <- list(one_hidden_layer=c(5), two_hidden_layers=c(5,5), three_hidden_layers=c(5,5,5))
nn_list <- lapply(architecture_list, train_nn_wrapper)
knitr::opts_chunk$set(echo = TRUE)
# load packages and set random seed
library(MASS)
library(deepnet)
library(purrr)
set.seed(12345)
?USArrests
pairs(USArrests)
X <- scale(USArrests)
pca <- prcomp(X)
barplot(pca$sdev^2/sum(pca$sdev^2), names.arg=c("PC1", "PC2", "PC3", "PC4"), ylab="Proportion of variance explained")
barplot(cumsum(pca$sdev^2/sum(pca$sdev^2))*100, names.arg=c("PC1", "PC2", "PC3", "PC4"), ylab="Cumulative proportion of variance explained")
rot_X <- pca$x
plot(rot_X[,1], rot_X[,2], xlab="PC1", ylab="PC2")
km <- kmeans(X,center=2)
plot(rot_X[,1], rot_X[,2], xlab="PC1", ylab="PC2", col=km$cluster)
km <- kmeans(X,center=3)
plot(rot_X[,1], rot_X[,2], xlab="PC1", ylab="PC2", col=km$cluster)
km <- kmeans(X,center=4)
plot(rot_X[,1], rot_X[,2], xlab="PC1", ylab="PC2", col=km$cluster)
dist_data <- dist(X, method='euclidean')
hdata <- hclust(dist_data)
plot(hdata)
abline(h=3.75, lty=2) # this is the height at which we will cut the dendrogram
alloc <- cutree(hdata, h=3.75)
get_clust_assignment <- function(dist_method, linkage_method) {
hclust(dist(X, method=dist_method), method=linkage_method)
}
# perform hierarchichal clustering using different arguments
hclust_args <- expand.grid(dist_method=c("euclidean", "manhattan"), linkage_method=c("complete", "single", "average"))
hclust_list <- pmap(hclust_args, get_clust_assignment)
# plot the resulting dendrograms
par(mfrow=c(3,2))
for(i in 1:length(hclust_list)) {
plot(hclust_list[[i]],
main=sprintf("%s distance and %s linkage", hclust_args[i,1], hclust_args[i,2]),
xlab="State")
}
data(Boston)
?Boston
y <- Boston[,14]
x <- Boston[,1:13]
pairs(Boston)
TEST_SIZE <- 0.3
test_indices <- sample(1:nrow(x), size=as.integer(TEST_SIZE*nrow(x)), replace=FALSE)
x_train <- x[-test_indices,]
y_train <- y[-test_indices]
x_test <- x[test_indices,]
y_test <- y[test_indices]
training_means <- apply(x_train, MARGIN=c(2), mean)
training_sds <- apply(x_train, MARGIN=c(2), sd)
y_train_mean <- mean(y_train)
y_train_sd <- sd(y_train)
x_train_ <- scale(x_train)
y_train_ <- scale(y_train)
N_EPOCHS <- 20
BATCH_SIZE <- 64
nn <- nn.train(x_train_, y_train_,
hidden=c(5,5),
activationfun="tanh",
learningrate=1e-1,
batchsize=BATCH_SIZE,
numepochs=N_EPOCHS,
output="linear",
momentum=0.0)
# nn$L contains the loss for each batch
epoch_indices <- parallel::splitIndices(length(nn$L), N_EPOCHS)
epoch_losses <- sapply(epoch_indices, function(idxs) mean(nn$L[idxs]))
plot(1:length(epoch_losses), epoch_losses, type="b", xlab="Epoch", ylab="Loss")
# predictions on test set and MSE
# rescale x_test using mean and variance from the test set
x_test_ <- scale(x_test, center=training_means, scale=training_sds)
y_test_hat_ <- nn.predict(nn, x_test_)
# rescale y_test to make it comparable with the network predictions
y_test_ <- scale(y_test, center=y_train_mean, scale=y_train_sd)
mean((y_test_-y_test_hat_)**2.0)
plot(y_test_, y_test_hat_)
abline(0,1, col="red")
train_nn_wrapper <- function(hidden_spec) {
nn.train(x_train_, y_train_,
hidden=hidden_spec,
activationfun="tanh",
learningrate=1e-1,
batchsize=BATCH_SIZE,
numepochs=N_EPOCHS,
output="linear",
momentum=0.0)
}
architecture_list <- list(one_hidden_layer=c(5), two_hidden_layers=c(5,5), three_hidden_layers=c(5,5,5))
nn_list <- lapply(architecture_list, train_nn_wrapper)
mse <- function(y_true, y_obs) { mean((y_true-y_obs)**2.0) }
mse_list <- sapply(nn_list, function(net) mse(y_test_, nn.predict(net, x_test_)))
barplot(mse_list, names.arg=names(mse_list), ylab="Test MSE")
train_nn_wrapper <- function(hidden_spec) {
nn.train(x_train_, y_train_,
hidden=hidden_spec,
activationfun="tanh",
learningrate=1e-1,
batchsize=BATCH_SIZE,
numepochs=N_EPOCHS,
output="linear",
momentum=0.0)
}
architecture_list <- list(one_hidden_layer=c(5), two_hidden_layers=c(5,5), three_hidden_layers=c(5,5,5))
nn_list <- lapply(architecture_list, train_nn_wrapper)
train_nn_wrapper <- function(hidden_spec) {
nn.train(x_train_, y_train_,
hidden=hidden_spec,
activationfun="tanh",
learningrate=1e-1,
batchsize=BATCH_SIZE,
numepochs=N_EPOCHS,
output="linear",
momentum=0.0)
}
architecture_list <- list(one_hidden_layer=c(5), two_hidden_layers=c(5,5), three_hidden_layers=c(5,5,5))
nn_list <- lapply(architecture_list, train_nn_wrapper)
mse <- function(y_true, y_obs) { mean((y_true-y_obs)**2.0) }
mse_list <- sapply(nn_list, function(net) mse(y_test_, nn.predict(net, x_test_)))
barplot(mse_list, names.arg=names(mse_list), ylab="Test MSE")
train_nn_wrapper <- function(hidden_spec) {
nn.train(x_train_, y_train_,
hidden=hidden_spec,
activationfun="tanh",
learningrate=1e-1,
batchsize=BATCH_SIZE,
numepochs=N_EPOCHS,
output="linear",
momentum=0.0)
}
architecture_list <- list(one_hidden_layer=c(5), two_hidden_layers=c(5,5), three_hidden_layers=c(5,5,5))
nn_list <- lapply(architecture_list, train_nn_wrapper)
mse <- function(y_true, y_obs) { mean((y_true-y_obs)**2.0) }
mse_list <- sapply(nn_list, function(net) mse(y_test_, nn.predict(net, x_test_)))
barplot(mse_list, names.arg=names(mse_list), ylab="Test MSE")
Boston
#Read in the data:
MyData <- read.csv("EUR-GBP-Rates.csv", header = TRUE, sep = ",", dec = ".",fileEncoding="UTF-8-BOM")
setwd("~/GitHub/Machine_Learning_and_Applied_Statistics/Week2/LectureNotes/RCode")
#Read in the data:
MyData <- read.csv("EUR-GBP-Rates.csv", header = TRUE, sep = ",", dec = ".",fileEncoding="UTF-8-BOM")
#View the data
View(MyData)
#Print the first part of the data
head(MyData)
#Print the last part of the data
tail(MyData)
#Convert the dates into the correct date format
MyDates <- as.Date(MyData$Date, "%d/%m/%Y")
#Plot the data
plot(MyDates,MyData$GBPtoEUR,type="l", xlab="Time",ylab="EUR/GBP exchange rate")
plot(MyDates,MyData$EURtoGBP,type="l", xlab="Time",ylab="GBP/EUR exchange rate")
#Plot the data
plot(MyDates,MyData$GBPtoEUR,type="l", xlab="Time",ylab="EUR/GBP exchange rate")
head(MyDates)
?plot
#Plot the data
#type: whether the plot is line or point etc
plot(MyDates,MyData$GBPtoEUR,type="l", xlab="Time",ylab="EUR/GBP exchange rate")
plot(MyDates,MyData$EURtoGBP,type="l", xlab="Time",ylab="GBP/EUR exchange rate")
#You can also check the length of your dataset using
length(MyData$GBPtoEUR)
#Read in the data (ignoring the first seven rows which include the data description)
MyData <- read.csv("UK-Population.csv", header = TRUE, sep = ",", dec=".", skip=7)
#View the data
View(MyData)
#Print the first part of the data
head(MyData)
#Print the last part of the data
tail(MyData)
#Briefly check the structure of the data
str(MyData) #outcome: a data.frame containing integers
#Convert the data into a time series using function ts
population <- ts(MyData[,2],start=1971, end=2020, frequency =1)
population
#Plot the data
plot(population, type = "p", pch=19)
#Example 3: Electricity load
#Install the package opera (this only needs to be done once!)
#install.packages("opera")
#Load the package opera
library(opera)
?attach
#Load the data set
attach(electric_load)
#Convert the data into a time series using the function ts
LoadTS <-ts(Load,start=1996, frequency =52)
#Check the length of the time series
length(LoadTS)
#Plot the data
plot(LoadTS,type ="l", ylab="Weekly load in MW")
detach(electric_load)
#Read in the data:
MyData <- read.csv("BTC-USD.csv", header = TRUE, sep = ",", dec = ".")
#View the data
View(MyData)
#Print the first part of the data
head(MyData)
#Print the last part of the data
tail(MyData)
#Convert the dates into the correct date format
MyDates <- as.Date(MyData$Date, "%d/%m/%Y")
#Plot the data
plot(MyDates,MyData$Close,type="l", xlab="Time",ylab="Bitcoin price is USD")
#Read in the data (ignoring the first seven rows which include the data description)
MyData <- read.csv("UK-Population.csv", header = TRUE, sep = ",", dec=".", skip=7)
#Example 3: Electricity load
#Install the package opera (this only needs to be done once!)
#install.packages("opera")
#Load the package opera
library(opera)
#Load the data set
attach(electric_load)
#Convert the data into a time series using the function ts
LoadTS <-ts(Load,start=1996, frequency =52)
head(electric_load)
#Check the length of the time series
length(LoadTS)
#Plot the data
plot(LoadTS,type ="l", ylab="Weekly load in MW")
detach(electric_load)
#Read in the data:
MyData <- read.csv("BTC-USD.csv", header = TRUE, sep = ",", dec = ".")
#View the data
View(MyData)
#Print the first part of the data
head(MyData)
#Print the last part of the data
tail(MyData)
#Convert the dates into the correct date format
MyDates <- as.Date(MyData$Date, "%d/%m/%Y")
#Convert the dates into the correct date format
MyDates <- as.Date(MyData$Date, "%d/%m/%Y")
#Plot the data
plot(MyDates,MyData$Close,type="l", xlab="Time",ylab="Bitcoin price is USD")
#Read in the data:
MyData <- read.csv("EUR-GBP-Rates.csv", header = TRUE, sep = ",",
dec = ".",fileEncoding="UTF-8-BOM")
#Read in the data:
MyData <- read.csv("EUR-GBP-Rates.csv", header = TRUE, sep = ",",
dec = ".",fileEncoding="UTF-8-BOM")
?read.csv
#Read in the data:
MyData <- read.table("EUR-GBP-Rates.csv", header = TRUE, sep = ",",
dec = ".",fileEncoding="UTF-8-BOM")
#Read in the data:
MyData <- read.csv("EUR-GBP-Rates.csv", header = TRUE, sep = ",",
dec = ".",fileEncoding="UTF-8-BOM")
# VIew the data
View(MyData)
# VIew the data
view(MyData)
length(MyData)
# View the data
View(MyData)
nrow(MyData)
str(MyData)
MyData$GBPtoEUR
head(MyData
)
head(MyData[,3])
head(MyData$GBPtoEUR)
plot(MyData$GBPtoEUR)
plot(MyData$GBPtoEUR, type = 'l')
plot(MyData$GBPtoEUR, type = 'l', col = 'blue')
plot(MyData$GBPtoEUR, type = 'l', col = 'blue', main = "EUR/GBP exchange rate")
plot(MyData$GBPtoEUR, type = 'l', col = 'blue', main = "EUR/GBP exchange rate",
xlab = "Time", ylab = "GBP per EUR", cex.main = 1.25)
plot(MyData$GBPtoEUR, type = 'l', col = 'blue', main = "EUR/GBP exchange rate",
xlab = "Time", ylab = "GBP per EUR", cex.main = 1.25, cex.lab = 1.5)
plot(MyData$GBPtoEUR, type = 'l', col = 'blue', main = "EUR/GBP exchange rate",
xlab = "Time", ylab = "GBP per EUR", cex.main = 1.25, cex.lab = 1.5,
cex.axis = 2)
plot(MyData$Date, MyData$GBPtoEUR)
?as.Date
head(MyData$Date)
# Transfer Data
MyDate = as.Date(MyData$Date, "%d/%m/%Y")
plot(MyData$Date, MyData$GBPtoEUR)
plot(MyDate, MyData$GBPtoEUR)
plot(MyDate, MyData$GBPtoEUR, type = 'l')
# Now we can compare the initial plot with the modified plot
par(mfrow=c(1, 2))
# Transfer Data
MyDates = as.Date(MyData$Date, "%d/%m/%Y")
plot(MyDate, MyData$GBPtoEUR, type = 'l')
# Now we can compare the initial plot with the modified plot
par(mfrow=c(1, 2))
# Now we can compare the initial plot with the modified plot
par(mfrow=c(1, 2))
plot(MyData$GBPtoEUR)
plot(MyDates, MyData$GBPtoEUR, type="l",col="blue", main="EUR/GBP
exchange rate", xlab="Time", ylab="GBP per one EUR", cex.main
# Now we can compare the initial plot with the modified plot
par(mfrow=c(1, 2))
plot(MyData$GBPtoEUR)
plot(MyDates, MyData$GBPtoEUR, type="l",col="blue", main="EUR/GBP
exchange rate", xlab="Time", ylab="GBP per one EUR", cex.main
plot(MyDates, MyData$GBPtoEUR, type="l",col="blue", main="EUR/GBP
exchange rate", xlab="Time", ylab="GBP per one EUR", cex.main
plot(MyDates, MyData$GBPtoEUR, type="l",col="blue", main="EUR/GBP
exchange rate", xlab="Time", ylab="GBP per one EUR", cex.main
plot(MyDates, MyData$GBPtoEUR, type="l",col="blue", main="EUR/GBP
exchange rate", xlab="Time", ylab="GBP per one EUR", cex.main
plot(MyData$GBPtoEUR)
plot(MyDates, MyData$GBPtoEUR, type="l",col="blue", main="EUR/GBP exchange rate", xlab="Time", ylab="GBP per one EUR", cex.main
=1.25, cex.lab=1.5, cex.axis=2)
MyData <- read.csv("EUR-GBP-Rates.csv", header = TRUE, sep = ",", dec = ".",fileEncoding="UTF-8-BOM")
MyData <- read.csv("EUR-GBP-Rates.csv", header = TRUE, sep = ",", dec = ".",fileEncoding="UTF-8-BOM")
View(MyData)
nrow(MyData)
str(MyData)
MyData[, 3]
plot(MyData$GBPtoEUR, type = 'l', col = 'blue', main = "EUR/GBP exchange rate", xlab = "Time", ylab = "GBP per EUR", cex.main = 1.25, cex.lab = 1.5, cex.axis = 2)
par(mfrow=c(1,2))
plot(MyData$GBPtoEUR)
plot(MyDates, MyData$GBPtoEUR, type="l",col="blue", main="EUR/GBP
exchange rate", xlab="Time", ylab="GBP per one EUR", cex.main=1.25, cex.lab=1.5, cex.axis=2)
MyDates = as.Date(MyData$Date, "%d/%m/%Y")
par(mfrow=c(1,2))
MyDates = as.Date(MyData$Date, "%d/%m/%Y")
plot(MyData$GBPtoEUR)
plot(MyDates, MyData$GBPtoEUR, type="l",col="blue", main="EUR/GBP
exchange rate", xlab="Time", ylab="GBP per one EUR", cex.main=1.25, cex.lab=1.5, cex.axis=2)
par(mfrow=c(1,1))
par(mfrow=c(1,2))
MyDates = as.Date(MyData$Date, "%d/%m/%Y")
plot(MyData$GBPtoEUR)
plot(MyDates, MyData$GBPtoEUR, type="l",col="blue", main="EUR/GBP
exchange rate", xlab="Time", ylab="GBP per one EUR", cex.main=1.25, cex.lab=1.5, cex.axis=2)
par(mfrow=c(1,1))
mean(MyData$GBPtoEUR)
?acf
MyData$Value
acf(MyData$GBPtoEUR, type = "covariance", plot = FALSE)
acf(MyData$GBPtoEUR, type = "covariance", plot = FALSE)
plot.ecdf(MyData$GBPtoEUR)
hist(MyData$GBPtoEUR)
?hist
hist(MyData$GBPtoEUR,breaks=4)
hist(MyData$GBPtoEUR,breaks=8)
hist(MyData$GBPtoEUR,breaks=32)
par(mfrow=c(3,3))
par(mfrow=c(3,3))
hist(MyData$GBPtoEUR,breaks=4)
hist(MyData$GBPtoEUR,breaks=8)
hist(MyData$GBPtoEUR,breaks=12)
hist(MyData$GBPtoEUR,breaks=16)
hist(MyData$GBPtoEUR,breaks=20)
hist(MyData$GBPtoEUR,breaks=24)
hist(MyData$GBPtoEUR,breaks=28)
hist(MyData$GBPtoEUR,breaks=32)
hist(MyData$GBPtoEUR,breaks=36)
par(mfrow=c(1,1))
par(mfrow=c(3,3))
hist(MyData$GBPtoEUR,breaks=4)
hist(MyData$GBPtoEUR,breaks=8)
hist(MyData$GBPtoEUR,breaks=12)
hist(MyData$GBPtoEUR,breaks=16)
hist(MyData$GBPtoEUR,breaks=20)
hist(MyData$GBPtoEUR,breaks=24)
hist(MyData$GBPtoEUR,breaks=28)
hist(MyData$GBPtoEUR,breaks=32)
hist(MyData$GBPtoEUR,breaks=36)
par(mfrow=c(1,1))
par(mfrow=c(3,3))
hist(MyData$GBPtoEUR,breaks=4)
hist(MyData$GBPtoEUR,breaks=8)
hist(MyData$GBPtoEUR,breaks=12)
hist(MyData$GBPtoEUR,breaks=16)
hist(MyData$GBPtoEUR,breaks=20)
hist(MyData$GBPtoEUR,breaks=24)
hist(MyData$GBPtoEUR,breaks=28)
hist(MyData$GBPtoEUR,breaks=32)
hist(MyData$GBPtoEUR,breaks=36)
par(mfrow=c(1,1))
par(mfrow=c(3,3))
hist(MyData$GBPtoEUR,breaks=4)
hist(MyData$GBPtoEUR,breaks=8)
hist(MyData$GBPtoEUR,breaks=12)
hist(MyData$GBPtoEUR,breaks=16)
hist(MyData$GBPtoEUR,breaks=20)
hist(MyData$GBPtoEUR,breaks=24)
hist(MyData$GBPtoEUR,breaks=28)
hist(MyData$GBPtoEUR,breaks=32)
hist(MyData$GBPtoEUR,breaks=36)
par(mfrow=c(1,1))
par(mfrow=c(3,3))
hist(MyData$GBPtoEUR,breaks=4)
hist(MyData$GBPtoEUR,breaks=8)
hist(MyData$GBPtoEUR,breaks=12)
hist(MyData$GBPtoEUR,breaks=16)
hist(MyData$GBPtoEUR,breaks=20)
hist(MyData$GBPtoEUR,breaks=24)
hist(MyData$GBPtoEUR,breaks=28)
hist(MyData$GBPtoEUR,breaks=32)
hist(MyData$GBPtoEUR,breaks=36)
par(mfrow=c(1,1))
par(mfrow=c(3,3))
hist(MyData$GBPtoEUR,breaks=4)
hist(MyData$GBPtoEUR,breaks=8)
hist(MyData$GBPtoEUR,breaks=12)
hist(MyData$GBPtoEUR,breaks=16)
hist(MyData$GBPtoEUR,breaks=20)
hist(MyData$GBPtoEUR,breaks=24)
hist(MyData$GBPtoEUR,breaks=28)
hist(MyData$GBPtoEUR,breaks=32)
hist(MyData$GBPtoEUR,breaks=36)
par(mfrow=c(1,1))
par(mfrow=c(3,3))
hist(MyData$GBPtoEUR,breaks=4)
hist(MyData$GBPtoEUR,breaks=8)
hist(MyData$GBPtoEUR,breaks=12)
hist(MyData$GBPtoEUR,breaks=16)
hist(MyData$GBPtoEUR,breaks=20)
hist(MyData$GBPtoEUR,breaks=24)
hist(MyData$GBPtoEUR,breaks=28)
hist(MyData$GBPtoEUR,breaks=32)
hist(MyData$GBPtoEUR,breaks=36)
par(mfrow=c(1,1))
par(mfrow=c(3,3))
hist(MyData$GBPtoEUR,breaks=4)
hist(MyData$GBPtoEUR,breaks=8)
hist(MyData$GBPtoEUR,breaks=12)
hist(MyData$GBPtoEUR,breaks=16)
hist(MyData$GBPtoEUR,breaks=20)
hist(MyData$GBPtoEUR,breaks=24)
hist(MyData$GBPtoEUR,breaks=28)
hist(MyData$GBPtoEUR,breaks=32)
hist(MyData$GBPtoEUR,breaks=36)
par(mfrow=c(1,1))
```{r, fig.height=9, fig.width=9}
par(mfrow=c(3,3))
hist(MyData$GBPtoEUR,breaks=4)
hist(MyData$GBPtoEUR,breaks=8)
hist(MyData$GBPtoEUR,breaks=12)
hist(MyData$GBPtoEUR,breaks=16)
hist(MyData$GBPtoEUR,breaks=20)
hist(MyData$GBPtoEUR,breaks=24)
hist(MyData$GBPtoEUR,breaks=28)
hist(MyData$GBPtoEUR,breaks=32)
hist(MyData$GBPtoEUR,breaks=36)
par(mfrow=c(1,1))
par(mfrow=c(3,3))
hist(MyData$GBPtoEUR,breaks=4)
hist(MyData$GBPtoEUR,breaks=8)
hist(MyData$GBPtoEUR,breaks=12)
hist(MyData$GBPtoEUR,breaks=16)
hist(MyData$GBPtoEUR,breaks=20)
hist(MyData$GBPtoEUR,breaks=24)
hist(MyData$GBPtoEUR,breaks=28)
hist(MyData$GBPtoEUR,breaks=32)
hist(MyData$GBPtoEUR,breaks=36)
par(mfrow=c(1,1))
par(mfrow=c(3,3))
hist(MyData$GBPtoEUR,breaks=4)
hist(MyData$GBPtoEUR,breaks=8)
hist(MyData$GBPtoEUR,breaks=12)
hist(MyData$GBPtoEUR,breaks=16)
hist(MyData$GBPtoEUR,breaks=20)
hist(MyData$GBPtoEUR,breaks=24)
hist(MyData$GBPtoEUR,breaks=28)
hist(MyData$GBPtoEUR,breaks=32)
hist(MyData$GBPtoEUR,breaks=36)
par(mfrow=c(1,1))
summary(MyData$GBPtoEUR)
